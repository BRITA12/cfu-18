# Improved Platformer Game Template for CodeSkulptor

import simplegui
import random

# Constants
WIDTH = 800
HEIGHT = 600
PLAYER_SIZE = 40
PLATFORM_WIDTH = 100
PLATFORM_HEIGHT = 20
GRAVITY = 1
JUMP_STRENGTH = -15

# Colors
COLORS = {
    'bg': "SkyBlue",
    'player': "Orange",
    'platform': "Green",
    'collectible': "Gold",
}

# Player class
class Player:
    def __init__(self):
        self.x = WIDTH // 2
        self.y = HEIGHT - PLAYER_SIZE
        self.vel_x = 0
        self.vel_y = 0
        self.on_ground = True

    def jump_action(self):
        if self.on_ground:
            self.vel_y += JUMP_STRENGTH
            self.on_ground = False

    def update(self):
        # Apply gravity
        self.vel_y += GRAVITY
        self.y += self.vel_y
        self.x += self.vel_x
        
        # Check for ground collision
        if self.y >= HEIGHT - PLAYER_SIZE:
            self.y = HEIGHT - PLAYER_SIZE
            self.vel_y = 0
            self.on_ground = True

        # Check for boundary collision
        if self.x < 0:
            self.x = 0
        elif self.x > WIDTH - PLAYER_SIZE:
            self.x = WIDTH - PLAYER_SIZE

# Platform class
class Platform:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def draw(self, canvas):
        # Draw the platform using draw_polygon
        canvas.draw_polygon([(self.x, self.y),
                             (self.x + PLATFORM_WIDTH, self.y),
                             (self.x + PLATFORM_WIDTH, self.y + PLATFORM_HEIGHT),
                             (self.x, self.y + PLATFORM_HEIGHT)], 
                            1, COLORS['platform'], COLORS['platform'])

# Collectible class
class Collectible:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.collected = False

    def draw(self, canvas):
        if not self.collected:
            canvas.draw_circle((self.x + PLAYER_SIZE // 2, self.y + PLAYER_SIZE // 2), 15, 1, "Black", COLORS['collectible'])

    def check_collision(self, player):
        if (self.x < player.x + PLAYER_SIZE and
            self.x + PLAYER_SIZE > player.x and
            self.y < player.y + PLAYER_SIZE and
            self.y + PLAYER_SIZE > player.y):
            self.collected = True
            return True
        return False

# Global game state
player = Player()
platforms = [Platform(random.randint(0, WIDTH - PLATFORM_WIDTH), random.randint(400, HEIGHT - 50)) for _ in range(5)]
collectibles = [Collectible(random.randint(0, WIDTH - PLAYER_SIZE), random.randint(100, HEIGHT - 100)) for _ in range(3)]
score = 0

# Event handlers
def draw(canvas):
    global score

    # Draw background
    canvas.draw_polygon([(0, 0), (WIDTH, 0), (WIDTH, HEIGHT), (0, HEIGHT)], 1, COLORS['bg'], COLORS['bg'])
    
    # Draw player
    canvas.draw_polygon([(player.x, player.y), 
                         (player.x + PLAYER_SIZE, player.y), 
                         (player.x + PLAYER_SIZE, player.y + PLAYER_SIZE), 
                         (player.x, player.y + PLAYER_SIZE)], 
                        1, "White", COLORS['player'])

    # Draw platforms
    for platform in platforms:
        platform.draw(canvas)

    # Draw collectibles
    for collectible in collectibles:
        collectible.draw(canvas)
        if collectible.check_collision(player):
            score += 1  # Increase score
            collectible.collected = True  # Mark collectible as collected

    # Draw score
    canvas.draw_text("Score: " + str(score), (20, 30), 24, "White")

    # Update player
    player.update()

    # Check for collisions with platforms
    for platform in platforms:
        if (player.x + PLAYER_SIZE > platform.x and
            player.x < platform.x + PLATFORM_WIDTH and
            player.y + PLAYER_SIZE <= platform.y + PLATFORM_HEIGHT and
            player.y + PLAYER_SIZE + player.vel_y >= platform.y):
            player.y = platform.y - PLAYER_SIZE
            player.vel_y = 0
            player.on_ground = True

def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        player.vel_x = -5
    elif key == simplegui.KEY_MAP['right']:
        player.vel_x = 5
    elif key == simplegui.KEY_MAP['up']:
        player.jump_action()

def keyup(key):
    if key == simplegui.KEY_MAP['left'] or key == simplegui.KEY_MAP['right']:
        player.vel_x = 0

# Create a frame
frame = simplegui.create_frame("Improved Platformer Game", WIDTH, HEIGHT)

# Register event handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

# Start the frame
frame.start()
